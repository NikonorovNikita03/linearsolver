import json
import random
from pathlib import Path
import spacy
from spacy.tokens import DocBin

# Примеры данных для обучения (можно расширить)
TRAIN_DATA = [
    (
        "На складах А и Б имеется 100 и 200 единиц товара. Магазины запрашивают 80, 120 и 100 единиц. Стоимости перевозок: из А - 5, 3, 2; из Б - 4, 1, 6.",
        {
            "entities": [
                (20, 23, "SUPPLY"),  # 100
                (26, 29, "SUPPLY"),  # 200
                (56, 58, "DEMAND"),   # 80
                (60, 63, "DEMAND"),   # 120
                (65, 68, "DEMAND"),   # 100
                (97, 98, "COST"),     # 5
                (100, 101, "COST"),   # 3
                (103, 104, "COST"),   # 2
                (110, 111, "COST"),   # 4
                (113, 114, "COST"),   # 1
                (116, 117, "COST")    # 6
            ]
        }
    ),
    (
        "Имеется 2 поставщика с запасами [100, 150] и 3 потребителя с потребностями [70, 80, 100]. Матрица стоимостей: [[5, 3, 2], [4, 1, 6]].",
        {
            "entities": [
                (16, 19, "SUPPLY"),  # 100
                (21, 24, "SUPPLY"),  # 150
                (50, 52, "DEMAND"),   # 70
                (54, 56, "DEMAND"),   # 80
                (58, 61, "DEMAND"),  # 100
                (82, 83, "COST"),    # 5
                (85, 86, "COST"),    # 3
                (88, 89, "COST"),    # 2
                (93, 94, "COST"),    # 4
                (96, 97, "COST"),    # 1
                (99, 100, "COST")    # 6
            ]
        }
    ),
    (
        "Три завода производят 200, 300 и 250 единиц продукции соответственно. "
        "Четыре магазина подали заявки на 150, 200, 100 и 300 единиц. "
        "Стоимости доставки: первый завод - 2, 3, 5, 1; второй - 4, 2, 1, 3; третий - 3, 4, 2, 6.",
        {
            "entities": [
                (23, 26, "SUPPLY"),  # 200
                (28, 31, "SUPPLY"),  # 300
                (35, 38, "SUPPLY"),  # 250
                (79, 82, "DEMAND"),  # 150
                (84, 87, "DEMAND"),  # 200
                (89, 92, "DEMAND"),  # 100
                (94, 97, "DEMAND"),  # 300
                (122, 123, "COST"),  # 2
                (125, 126, "COST"),  # 3
                (128, 129, "COST"),  # 5
                (131, 132, "COST"),  # 1
                (142, 143, "COST"),  # 4
                (145, 146, "COST"),  # 2
                (148, 149, "COST"),  # 1
                (151, 152, "COST"),  # 3
                (162, 163, "COST"),  # 3
                (165, 166, "COST"),  # 4
                (168, 169, "COST"),  # 2
                (171, 172, "COST")   # 6
            ]
        }
    ),
    (
        "Поставщики: A=400, B=500, C=600\n"
        "Потребители: X=300, Y=350, Z=450\n"
        "Тарифы:\n"
        "A-X:7 A-Y:8 A-Z:5\n"
        "B-X:6 B-Y:4 B-Z:3\n"
        "C-X:9 C-Y:7 C-Z:8",
        {
            "entities": [
                (13, 16, "SUPPLY"),  # 400
                (19, 22, "SUPPLY"),  # 500
                (25, 28, "SUPPLY"),  # 600
                (44, 47, "DEMAND"),  # 300
                (50, 53, "DEMAND"),  # 350
                (56, 59, "DEMAND"),  # 450
                (70, 71, "COST"),    # 7
                (75, 76, "COST"),   # 8
                (80, 81, "COST"),    # 5
                (87, 88, "COST"),    # 6
                (92, 93, "COST"),    # 4
                (97, 98, "COST"),    # 3
                (104, 105, "COST"),  # 9
                (109, 110, "COST"),  # 7
                (114, 115, "COST")   # 8
            ]
        }
    ),
    (
        "Два склада имеют запасы 120.5 и 180.75 тонн. "
        "Три строительных объекта требуют 80.25, 100.5 и 120.0 тонн. "
        "Расценки на перевозку: склад1 → 5.2, 3.75, 2.0; склад2 → 4.1, 1.5, 6.25.",
        {
            "entities": [
                (21, 26, "SUPPLY"),  # 120.5
                (29, 35, "SUPPLY"),  # 180.75
                (67, 72, "DEMAND"),  # 80.25
                (74, 79, "DEMAND"),  # 100.5
                (81, 86, "DEMAND"),  # 120.0
                (111, 115, "COST"),  # 5.2
                (117, 122, "COST"),  # 3.75
                (124, 127, "COST"),  # 2.0
                (137, 141, "COST"),  # 4.1
                (143, 147, "COST"),  # 1.5
                (149, 153, "COST")   # 6.25
            ]
        }
    ),
    (
        "Склад Северный имеет 350 единиц, склад Южный - 420. "
        "Магазинам Центральный и Западный нужно 300 и 200 единиц соответственно. "
        "Стоимости перевозок: Северный-Центральный: 12, Северный-Западный: 15; "
        "Южный-Центральный: 10, Южный-Западный: 18.",
        {
            "entities": [
                (21, 24, "SUPPLY"),  # 350
                (43, 46, "SUPPLY"),  # 420
                (78, 81, "DEMAND"),  # 300
                (86, 89, "DEMAND"),  # 200
                (136, 138, "COST"),  # 12
                (159, 161, "COST"),  # 15
                (183, 185, "COST"),  # 10
                (206, 208, "COST")  # 18
            ]
        }
    ),
    (
        "Фабрика в Москве производит 1500 кг продукции, в Питере - 2000 кг. "
        "Клиенты в Казани заказали 1200 кг, в Ростове - 800 кг, в Сочи - 1500 кг. "
        "Цены за перевозку 1 кг: Москва-Казань: 50 руб, Москва-Ростов: 70, Москва-Сочи: 90; "
        "Питер-Казань: 60, Питер-Ростов: 80, Питер-Сочи: 100.",
        {
            "entities": [
                (27, 31, "SUPPLY"),  # 1500
                (46, 50, "SUPPLY"),  # 2000
                (81, 85, "DEMAND"),  # 1200
                (96, 99, "DEMAND"),  # 800
                (110, 114, "DEMAND"), # 1500
                (151, 153, "COST"),  # 50
                (172, 174, "COST"),  # 70
                (192, 194, "COST"),  # 90
                (212, 214, "COST"),  # 60
                (231, 233, "COST"),  # 80
                (250, 253, "COST")   # 100
            ]
        }
    ),
    (
        "Компания 'Грузовик' имеет три распределительных центра: "
        "РЦ1 с запасом 500 единиц, РЦ2 - 600 ед. и РЦ3 - 400 единиц товара. "
        "Пять торговых точек сделали заказы: ТТ1 - 200, ТТ2 - 300, ТТ3 - 150, ТТ4 - 250, ТТ5 - 200. "
        "Матрица транспортных расходов (в у.е.): "
        "|   | ТТ1 | ТТ2 | ТТ3 | ТТ4 | ТТ5 |\n"
        "|РЦ1| 10  | 12  | 15  | 20  | 18  |\n"
        "|РЦ2| 8   | 10  | 12  | 15  | 16  |\n"
        "|РЦ3| 12  | 14  | 10  | 18  | 20  |",
        {
            "entities": [
                (71, 74, "SUPPLY"),  # 500
                (85, 88, "SUPPLY"),  # 600
                (100, 103, "SUPPLY"), # 400
                (154, 157, "DEMAND"), # 200
                (165, 168, "DEMAND"), # 300
                (176, 179, "DEMAND"), # 150
                (187, 190, "DEMAND"), # 250
                (198, 201, "DEMAND"), # 200
                (267, 269, "COST"),  # 10
                (274, 276, "COST"),  # 12
                (281, 283, "COST"),  # 15
                (288, 290, "COST"),  # 20
                (295, 297, "COST"),  # 18
                (312, 313, "COST"),  # 8
                (318, 320, "COST"),  # 10
                (325, 327, "COST"),  # 12
                (332, 334, "COST"),  # 15
                (339, 341, "COST"),  # 16
                (356, 358, "COST"),  # 12
                (363, 365, "COST"),  # 14
                (370, 372, "COST"),  # 10
                (377, 379, "COST"),  # 18
                (384, 386, "COST")   # 20
            ]
        }
    )
]

def save_data(data, filename):
    """Сохраняем размеченные данные в файл"""
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def convert_to_spacy(data, output_file):
    """Конвертируем данные в формат spaCy"""
    nlp = spacy.blank("ru")
    db = DocBin()
    
    for text, annotations in data:
        doc = nlp.make_doc(text)
        ents = []
        for start, end, label in annotations["entities"]:
            span = doc.char_span(start, end, label=label)
            if span is not None:
                ents.append(span)
        doc.ents = ents
        db.add(doc)
    
    db.to_disk(output_file)

if __name__ == "__main__":
    # Сохраняем сырые данные
    save_data(TRAIN_DATA, "transport_ner_data.json")
    
    # Разделяем на обучающую и тестовую выборки
    random.shuffle(TRAIN_DATA)
    split = int(0.8 * len(TRAIN_DATA))
    train_data = TRAIN_DATA[:split]
    test_data = TRAIN_DATA[split:]
    
    # Конвертируем в формат spaCy
    convert_to_spacy(train_data, "train.spacy")
    convert_to_spacy(test_data, "dev.spacy")
    
    print("Данные подготовлены!")